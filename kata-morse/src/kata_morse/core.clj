(ns kata-morse.core
  (:require [clojure.set :refer [map-invert]]
            [clojure.string :as s]))

(def morse-codes
  {
   ".-."     \R
   "....-"   \4
   "..."     \S
   "----."   \9
   "---..."  \:
   "...--"   \3
   ".--"     \W
   "....."   \5
   "-.-.-."  \;
   "...-"    \V
   ".--."    \P
   "--..."   \7
   "--.-"    \Q
   ".."      \I
   "-.."     \D
   "-"       \T
   "-.--.-"  \)
   "..---"   \2
   "...."    \H
   "-.--."   \(
   ".-.-."   \+
   "..-."    \F
   "-..."    \B
   ".-..-."  \"
   "-.--"    \Y
   "---.."   \8
   ".-.-.-"  \.
   "-.-"     \K
   "..--.-"  \_
   "---"     \O
   "-.-.--"  \!
   ".-.."    \L
   "--"      \M
   "..--.."  \?
   "-...-"   \=
   "-....-"  \-
   "."       \E
   ".----."  \'
   ".--.-."  \@
   "-...."   \6
   "...-..-" \$
   ".---"    \J
   "--."     \G
   "-."      \N
   "-..-"    \X
   "..-"     \U
   "--..--"  \,
   "--.."    \Z
   "-----"   \0
   ".----"   \1
   " "       \space
   "-..-."   \/
   ".-..."   \&
   "-.-."    \C
   ".-"      \A
   "%"       \space
   })

(defn decode [morse-phrase]
  (as-> morse-phrase it
        (s/replace it "   "  " % ")
        (s/split it #" ")
        (map morse-codes it)
        (s/join it)))

